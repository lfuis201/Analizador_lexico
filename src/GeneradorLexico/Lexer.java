/* The following code was generated by JFlex 1.6.1 */

package GeneradorLexico;
import static GeneradorLexico.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/luisfelipe/javaprojects/AnalizadorLexico/src/GeneradorLexico/lexer.lex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\52\1\54\1\54\1\53\22\0\1\65\1\16\1\56"+
    "\1\55\1\0\1\11\1\17\1\67\1\61\1\62\1\11\1\7\1\51"+
    "\1\10\1\6\1\12\1\5\11\4\1\0\1\66\1\14\1\13\1\15"+
    "\2\0\22\2\1\70\7\2\1\63\1\0\1\64\1\0\1\50\1\0"+
    "\1\32\1\40\1\24\1\44\1\27\1\26\1\46\1\25\1\22\1\2"+
    "\1\41\1\31\1\37\1\30\1\34\1\35\1\2\1\36\1\20\1\23"+
    "\1\33\1\42\1\21\1\43\1\45\1\47\1\57\1\3\1\60\7\0"+
    "\1\54\u1fa2\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\5\5\2\6\1\7"+
    "\1\1\22\3\1\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\3\1\7\1\5\1\2\2\6"+
    "\1\20\1\7\6\3\1\21\35\3\1\21\1\0\20\3"+
    "\1\22\34\3\1\0\7\3\1\0\10\3\1\0\6\3"+
    "\1\23\14\3\1\21\3\3\1\0\4\3\2\0\10\3"+
    "\1\0\1\3\1\0\5\3\1\0\4\3\1\0\5\3"+
    "\1\0\3\3\3\0\1\24\2\0\10\3\3\0\4\3"+
    "\1\0\2\3\2\0\5\3\2\0\4\3\1\0\1\3"+
    "\3\0\1\3\6\0\2\3\2\0\2\3\5\0\2\3"+
    "\1\0\2\3\2\0\1\3\1\0\1\25\1\3\11\0"+
    "\2\3\6\0\3\3\3\0\2\3\17\0\2\3\7\0"+
    "\2\3\1\26\1\27\20\0\1\30\16\0\1\31\2\0"+
    "\1\32\2\0\1\33\3\0\1\34\4\0\1\35\4\0"+
    "\1\36\1\37\1\0\1\40\1\0\1\41\1\0\1\42"+
    "\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\71\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u023a\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\71\0\u0759\0\253\0\71\0\u0792\0\71"+
    "\0\u07cb\0\71\0\71\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\u0921\0\253\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf"+
    "\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f"+
    "\0\u1398\0\253\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\253\0\u1f65"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d"+
    "\0\u2166\0\u219f\0\u21d8\0\u2010\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b\0\u2484"+
    "\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\71\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb"+
    "\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3"+
    "\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b"+
    "\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453"+
    "\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b"+
    "\0\u3654\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3"+
    "\0\u381c\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\71\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a"+
    "\0\u3b73\0\u3bac\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02"+
    "\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u0fcf"+
    "\0\u3eca\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059"+
    "\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221"+
    "\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u0720"+
    "\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506\0\u453f\0\71"+
    "\0\71\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896"+
    "\0\u48cf\0\71\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25"+
    "\0\u4a5e\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed"+
    "\0\71\0\u4c26\0\u4c5f\0\71\0\u4c98\0\u4cd1\0\71\0\u4d0a"+
    "\0\u4d43\0\u4d7c\0\71\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\71"+
    "\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\71\0\71\0\u4f7d\0\71"+
    "\0\u4fb6\0\71\0\u4fef\0\71\0\71";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\4\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\4"+
    "\1\37\1\4\1\40\1\4\1\41\1\4\1\42\2\4"+
    "\3\3\1\0\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\3\1\53\1\2\1\54\72\0\1\3"+
    "\47\0\3\3\11\0\1\3\5\0\4\4\12\0\31\4"+
    "\17\0\1\4\2\0\1\4\1\55\2\4\12\0\31\4"+
    "\17\0\1\4\4\0\2\6\72\0\1\56\3\0\1\56"+
    "\65\0\1\56\2\0\1\56\70\0\1\56\67\0\1\57"+
    "\1\56\70\0\1\60\70\0\1\61\1\62\67\0\1\60"+
    "\1\0\1\62\72\0\1\63\53\0\4\4\12\0\1\4"+
    "\1\64\1\65\1\66\1\4\1\67\23\4\17\0\1\4"+
    "\2\0\4\4\12\0\4\4\1\70\1\71\23\4\17\0"+
    "\1\4\2\0\4\4\12\0\6\4\1\72\1\4\1\73"+
    "\20\4\17\0\1\4\2\0\4\4\12\0\5\4\1\74"+
    "\1\4\1\75\6\4\1\76\6\4\1\77\3\4\17\0"+
    "\1\4\2\0\4\4\12\0\2\4\1\100\2\4\1\101"+
    "\3\4\1\102\1\103\1\4\1\104\14\4\17\0\1\4"+
    "\2\0\4\4\12\0\11\4\1\105\2\4\1\106\1\4"+
    "\1\107\12\4\17\0\1\4\2\0\4\4\12\0\10\4"+
    "\1\110\1\111\11\4\1\112\5\4\17\0\1\4\2\0"+
    "\4\4\12\0\7\4\1\113\21\4\17\0\1\4\2\0"+
    "\4\4\12\0\14\4\1\114\14\4\17\0\1\4\2\0"+
    "\4\4\12\0\13\4\1\115\15\4\17\0\1\4\2\0"+
    "\4\4\12\0\10\4\1\116\20\4\17\0\1\4\2\0"+
    "\4\4\12\0\15\4\1\117\13\4\17\0\1\4\2\0"+
    "\4\4\12\0\13\4\1\120\2\4\1\121\12\4\17\0"+
    "\1\4\2\0\4\4\12\0\7\4\1\122\21\4\17\0"+
    "\1\4\2\0\4\4\12\0\14\4\1\123\1\4\1\124"+
    "\12\4\17\0\1\4\2\0\4\4\12\0\2\4\1\125"+
    "\11\4\1\126\14\4\17\0\1\4\2\0\4\4\12\0"+
    "\7\4\1\127\4\4\1\130\14\4\17\0\1\4\2\0"+
    "\4\4\12\0\14\4\1\115\14\4\17\0\1\4\22\0"+
    "\1\131\50\0\4\4\12\0\3\4\1\132\25\4\17\0"+
    "\1\4\52\57\3\0\14\57\15\0\1\60\55\0\4\4"+
    "\12\0\2\4\1\133\26\4\17\0\1\4\2\0\4\4"+
    "\12\0\26\4\1\134\1\135\1\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\136\3\4\1\137\12\4\17\0"+
    "\1\4\2\0\4\4\12\0\14\4\1\140\14\4\17\0"+
    "\1\4\2\0\4\4\12\0\5\4\1\141\23\4\17\0"+
    "\1\4\2\0\4\4\12\0\2\4\1\142\26\4\17\0"+
    "\1\4\2\0\4\4\12\0\3\4\1\143\5\4\1\144"+
    "\17\4\17\0\1\4\2\0\4\4\12\0\2\4\1\145"+
    "\4\4\1\146\6\4\1\147\12\4\17\0\1\4\2\0"+
    "\4\4\12\0\17\4\1\150\11\4\17\0\1\4\2\0"+
    "\4\4\12\0\25\4\1\72\3\4\17\0\1\4\2\0"+
    "\4\4\12\0\15\4\1\151\13\4\17\0\1\4\2\0"+
    "\4\4\12\0\10\4\1\152\20\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\153\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\154\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\1\155\2\4\1\156\25\4\17\0\1\4"+
    "\2\0\4\4\12\0\10\4\1\157\2\4\1\160\15\4"+
    "\17\0\1\4\2\0\4\4\12\0\14\4\1\161\14\4"+
    "\17\0\1\4\2\0\4\4\12\0\16\4\1\72\12\4"+
    "\17\0\1\4\2\0\4\4\12\0\2\4\1\162\26\4"+
    "\17\0\1\4\2\0\4\4\12\0\13\4\1\163\15\4"+
    "\17\0\1\4\2\0\4\4\12\0\1\155\30\4\17\0"+
    "\1\4\2\0\4\4\12\0\3\4\1\164\25\4\17\0"+
    "\1\4\2\0\4\4\12\0\1\4\1\72\27\4\17\0"+
    "\1\4\2\0\4\4\12\0\10\4\1\165\20\4\17\0"+
    "\1\4\2\0\4\4\12\0\3\4\1\166\25\4\17\0"+
    "\1\4\2\0\4\4\12\0\1\167\1\4\1\170\26\4"+
    "\17\0\1\4\2\0\4\4\12\0\7\4\1\171\21\4"+
    "\17\0\1\4\2\0\4\4\12\0\20\4\1\172\10\4"+
    "\17\0\1\4\2\0\4\4\12\0\14\4\1\173\5\4"+
    "\1\174\6\4\17\0\1\4\2\0\4\4\12\0\3\4"+
    "\1\175\22\4\1\176\2\4\17\0\1\4\2\0\4\4"+
    "\12\0\14\4\1\177\14\4\17\0\1\4\2\0\4\4"+
    "\12\0\7\4\1\200\21\4\17\0\1\4\2\0\4\4"+
    "\12\0\16\4\1\201\12\4\17\0\1\4\2\0\4\4"+
    "\12\0\2\4\1\202\6\4\1\203\17\4\17\0\1\4"+
    "\2\0\4\4\12\0\6\4\1\204\2\4\1\205\17\4"+
    "\17\0\1\4\2\0\4\4\12\0\13\4\1\206\15\4"+
    "\17\0\1\4\30\0\1\207\42\0\4\4\12\0\16\4"+
    "\1\210\12\4\17\0\1\4\2\0\4\4\12\0\3\4"+
    "\1\156\25\4\17\0\1\4\2\0\4\4\12\0\10\4"+
    "\1\211\20\4\17\0\1\4\2\0\4\4\12\0\7\4"+
    "\1\212\21\4\17\0\1\4\2\0\4\4\12\0\3\4"+
    "\1\213\25\4\17\0\1\4\2\0\4\4\12\0\13\4"+
    "\1\214\15\4\17\0\1\4\2\0\4\4\12\0\16\4"+
    "\1\215\12\4\17\0\1\4\2\0\4\4\12\0\12\4"+
    "\1\216\16\4\17\0\1\4\2\0\4\4\12\0\11\4"+
    "\1\155\17\4\17\0\1\4\1\0\1\217\1\4\1\220"+
    "\2\4\12\0\1\4\1\221\1\222\1\4\1\223\1\4"+
    "\1\224\2\4\1\31\6\4\1\225\1\4\1\226\1\4"+
    "\1\227\4\4\1\0\1\217\12\0\1\230\2\0\1\4"+
    "\2\0\4\4\12\0\2\4\1\231\26\4\17\0\1\4"+
    "\2\0\4\4\12\0\1\72\30\4\17\0\1\4\2\0"+
    "\4\4\12\0\10\4\1\72\20\4\17\0\1\4\2\0"+
    "\4\4\12\0\14\4\1\113\14\4\17\0\1\4\2\0"+
    "\4\4\12\0\15\4\1\232\13\4\17\0\1\4\2\0"+
    "\4\4\12\0\7\4\1\233\21\4\17\0\1\4\2\0"+
    "\4\4\12\0\16\4\1\234\12\4\17\0\1\4\2\0"+
    "\4\4\12\0\1\145\30\4\17\0\1\4\2\0\4\4"+
    "\12\0\7\4\1\72\21\4\17\0\1\4\2\0\4\4"+
    "\12\0\4\4\1\235\24\4\17\0\1\4\2\0\4\4"+
    "\12\0\1\215\2\4\1\236\25\4\17\0\1\4\2\0"+
    "\4\4\12\0\3\4\1\237\25\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\240\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\7\4\1\241\21\4\17\0\1\4\2\0"+
    "\4\4\12\0\17\4\1\72\11\4\17\0\1\4\2\0"+
    "\4\4\12\0\7\4\1\242\21\4\17\0\1\4\2\0"+
    "\4\4\12\0\26\4\1\243\2\4\17\0\1\4\2\0"+
    "\4\4\12\0\14\4\1\72\14\4\17\0\1\4\2\0"+
    "\4\4\12\0\2\4\1\244\26\4\17\0\1\4\2\0"+
    "\4\4\12\0\14\4\1\146\14\4\17\0\1\4\2\0"+
    "\4\4\12\0\16\4\1\245\12\4\17\0\1\4\2\0"+
    "\4\4\12\0\11\4\1\213\17\4\17\0\1\4\2\0"+
    "\4\4\12\0\3\4\1\246\25\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\247\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\13\4\1\242\15\4\17\0\1\4\2\0"+
    "\4\4\12\0\2\4\1\250\26\4\17\0\1\4\2\0"+
    "\4\4\12\0\11\4\1\251\17\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\252\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\3\4\1\253\25\4\17\0\1\4\2\0"+
    "\4\4\12\0\24\4\1\254\4\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\255\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\256\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\7\4\1\247\21\4\17\0\1\4\2\0"+
    "\4\4\12\0\20\4\1\257\10\4\17\0\1\4\24\0"+
    "\1\260\46\0\4\4\12\0\2\4\1\261\26\4\17\0"+
    "\1\4\2\0\4\4\12\0\7\4\1\262\21\4\17\0"+
    "\1\4\2\0\4\4\12\0\24\4\1\263\4\4\17\0"+
    "\1\4\2\0\4\4\12\0\2\4\1\214\26\4\17\0"+
    "\1\4\2\0\4\4\12\0\4\4\1\72\24\4\17\0"+
    "\1\4\2\0\4\4\12\0\3\4\1\72\25\4\17\0"+
    "\1\4\2\0\4\4\12\0\16\4\1\264\12\4\17\0"+
    "\1\4\1\0\1\217\1\265\1\266\14\0\31\265\1\0"+
    "\1\217\12\0\1\217\2\0\1\265\1\0\1\217\1\267"+
    "\1\270\2\4\12\0\31\267\1\0\1\217\12\0\1\217"+
    "\2\0\1\267\2\0\4\4\12\0\4\4\1\70\24\4"+
    "\17\0\1\4\2\0\4\4\12\0\10\4\1\271\20\4"+
    "\17\0\1\4\2\0\4\4\12\0\5\4\1\272\23\4"+
    "\17\0\1\4\2\0\4\4\12\0\11\4\1\273\17\4"+
    "\17\0\1\4\2\0\4\4\12\0\14\4\1\274\14\4"+
    "\17\0\1\4\2\0\4\4\12\0\14\4\1\275\14\4"+
    "\17\0\1\4\2\0\4\4\12\0\14\4\1\276\14\4"+
    "\17\0\1\4\1\0\1\217\1\265\1\266\14\0\17\265"+
    "\1\277\11\265\1\0\1\217\12\0\1\217\2\0\1\265"+
    "\2\0\4\4\12\0\10\4\1\155\20\4\17\0\1\4"+
    "\2\0\4\4\12\0\11\4\1\174\17\4\17\0\1\4"+
    "\2\0\4\4\12\0\24\4\1\300\4\4\17\0\1\4"+
    "\1\0\1\301\1\4\1\302\2\4\12\0\1\4\1\221"+
    "\1\303\1\4\1\304\1\4\1\224\2\4\1\31\6\4"+
    "\1\225\1\4\1\226\1\4\1\227\4\4\1\0\1\301"+
    "\12\0\1\301\2\0\1\4\2\0\4\4\12\0\5\4"+
    "\1\72\23\4\17\0\1\4\2\0\4\4\12\0\2\4"+
    "\1\305\26\4\17\0\1\4\2\0\4\4\12\0\3\4"+
    "\1\306\25\4\17\0\1\4\2\0\4\4\12\0\10\4"+
    "\1\262\20\4\17\0\1\4\2\0\4\4\12\0\16\4"+
    "\1\146\12\4\17\0\1\4\1\0\1\307\1\4\1\310"+
    "\2\4\12\0\1\4\1\221\1\303\1\4\1\223\1\4"+
    "\1\224\2\4\1\31\6\4\1\225\1\4\1\226\1\4"+
    "\1\227\4\4\1\0\1\307\12\0\1\307\2\0\1\4"+
    "\2\0\4\4\12\0\26\4\1\134\2\4\17\0\1\4"+
    "\2\0\4\4\12\0\12\4\1\311\16\4\17\0\1\4"+
    "\2\0\4\4\12\0\7\4\1\312\21\4\17\0\1\4"+
    "\2\0\4\4\12\0\3\4\1\155\25\4\17\0\1\4"+
    "\2\0\4\4\12\0\1\313\30\4\17\0\1\4\1\0"+
    "\1\314\1\4\1\315\2\4\12\0\1\4\1\221\1\303"+
    "\1\4\1\223\1\4\1\224\2\4\1\31\6\4\1\316"+
    "\1\4\1\226\1\4\1\227\4\4\1\0\1\314\12\0"+
    "\1\314\2\0\1\4\2\0\4\4\12\0\21\4\1\72"+
    "\7\4\17\0\1\4\2\0\4\4\12\0\13\4\1\317"+
    "\15\4\17\0\1\4\2\0\4\4\12\0\3\4\1\71"+
    "\25\4\17\0\1\4\2\0\4\4\12\0\13\4\1\320"+
    "\15\4\17\0\1\4\2\0\4\4\12\0\11\4\1\321"+
    "\17\4\17\0\1\4\31\0\1\322\41\0\4\4\12\0"+
    "\10\4\1\323\20\4\17\0\1\4\2\0\4\4\12\0"+
    "\24\4\1\72\4\4\17\0\1\4\2\0\4\4\12\0"+
    "\14\4\1\324\14\4\17\0\1\4\2\0\4\4\12\0"+
    "\3\4\1\325\25\4\17\0\1\4\1\0\1\326\1\265"+
    "\1\327\2\265\5\0\1\330\4\0\31\265\1\0\1\326"+
    "\12\0\1\326\1\331\1\0\1\265\1\0\1\332\1\265"+
    "\1\333\2\265\5\0\1\330\4\0\31\265\1\0\1\332"+
    "\12\0\1\332\1\331\1\0\1\265\1\0\1\326\1\267"+
    "\1\334\2\267\5\0\1\330\4\0\31\267\1\0\1\326"+
    "\12\0\1\326\1\331\1\0\1\267\1\0\1\332\1\267"+
    "\1\335\2\267\5\0\1\330\4\0\31\267\1\0\1\332"+
    "\12\0\1\332\1\331\1\0\1\267\2\0\4\4\12\0"+
    "\3\4\1\336\25\4\17\0\1\4\2\0\4\4\12\0"+
    "\12\4\1\337\16\4\17\0\1\4\2\0\4\4\12\0"+
    "\14\4\1\340\14\4\17\0\1\4\2\0\4\4\12\0"+
    "\14\4\1\341\14\4\17\0\1\4\2\0\4\4\12\0"+
    "\2\4\1\342\26\4\17\0\1\4\2\0\4\4\12\0"+
    "\13\4\1\343\15\4\17\0\1\4\1\0\1\326\1\265"+
    "\1\327\2\265\5\0\1\330\4\0\12\265\1\344\16\265"+
    "\1\0\1\326\12\0\1\326\1\331\1\0\1\265\2\0"+
    "\4\4\12\0\7\4\1\324\21\4\17\0\1\4\1\0"+
    "\1\301\1\345\1\346\14\0\31\345\1\0\1\301\12\0"+
    "\1\301\2\0\1\345\1\0\1\301\1\347\1\350\2\4"+
    "\12\0\31\347\1\0\1\301\12\0\1\301\2\0\1\347"+
    "\2\0\4\4\12\0\10\4\1\351\20\4\17\0\1\4"+
    "\2\0\4\4\12\0\5\4\1\101\23\4\17\0\1\4"+
    "\2\0\4\4\12\0\10\4\1\352\20\4\17\0\1\4"+
    "\1\0\1\353\1\4\1\354\2\4\12\0\1\4\1\221"+
    "\1\303\1\4\1\223\1\4\1\355\2\4\1\31\6\4"+
    "\1\225\1\4\1\226\1\4\1\227\4\4\1\0\1\353"+
    "\12\0\1\353\2\0\1\4\1\0\1\307\1\356\1\357"+
    "\14\0\31\356\1\0\1\307\12\0\1\307\2\0\1\356"+
    "\1\0\1\307\1\360\1\361\2\4\12\0\31\360\1\0"+
    "\1\307\12\0\1\307\2\0\1\360\2\0\4\4\12\0"+
    "\3\4\1\362\25\4\17\0\1\4\2\0\4\4\12\0"+
    "\4\4\1\363\24\4\17\0\1\4\2\0\4\4\12\0"+
    "\3\4\1\364\25\4\17\0\1\4\1\0\1\314\1\365"+
    "\1\366\14\0\31\365\1\0\1\314\12\0\1\314\2\0"+
    "\1\365\1\0\1\314\1\367\1\370\2\4\12\0\31\367"+
    "\1\0\1\314\12\0\1\314\2\0\1\367\2\0\4\4"+
    "\12\0\14\4\1\123\14\4\17\0\1\4\2\0\4\4"+
    "\12\0\12\4\1\371\16\4\17\0\1\4\2\0\4\4"+
    "\12\0\11\4\1\215\17\4\17\0\1\4\2\0\4\4"+
    "\12\0\7\4\1\372\21\4\17\0\1\4\33\0\1\373"+
    "\37\0\4\4\12\0\26\4\1\374\2\4\17\0\1\4"+
    "\2\0\4\4\12\0\6\4\1\72\22\4\17\0\1\4"+
    "\2\0\4\4\12\0\30\4\1\351\17\0\1\4\1\0"+
    "\1\326\1\0\1\326\7\0\1\375\36\0\1\326\12\0"+
    "\1\326\4\0\1\326\1\265\1\327\2\265\5\0\1\376"+
    "\4\0\31\265\1\0\1\326\12\0\1\326\1\331\1\0"+
    "\1\265\4\0\2\377\5\0\1\330\56\0\1\332\1\265"+
    "\1\333\7\0\1\375\4\0\31\265\1\0\1\332\12\0"+
    "\1\332\2\0\1\265\1\0\1\332\1\265\1\333\2\265"+
    "\5\0\1\376\4\0\31\265\1\0\1\332\12\0\1\332"+
    "\1\331\1\0\1\265\1\0\1\326\1\267\1\334\2\267"+
    "\5\0\1\376\4\0\31\267\1\0\1\326\12\0\1\326"+
    "\1\331\1\0\1\267\1\0\1\332\1\267\1\335\2\267"+
    "\5\0\1\376\4\0\31\267\1\0\1\332\12\0\1\332"+
    "\1\331\1\0\1\267\1\0\1\217\1\4\1\220\2\4"+
    "\12\0\1\4\1\221\1\222\1\4\1\223\1\4\1\224"+
    "\2\4\1\31\6\4\1\225\1\4\1\226\1\4\1\227"+
    "\4\4\1\0\1\217\12\0\1\217\2\0\1\4\2\0"+
    "\4\4\12\0\16\4\1\243\12\4\17\0\1\4\2\0"+
    "\4\4\12\0\12\4\1\351\16\4\17\0\1\4\2\0"+
    "\4\4\12\0\11\4\1\243\17\4\17\0\1\4\2\0"+
    "\4\4\12\0\24\4\1\243\4\4\17\0\1\4\2\0"+
    "\4\4\12\0\20\4\1\u0100\10\4\17\0\1\4\1\0"+
    "\1\326\1\265\1\327\2\265\5\0\1\330\4\0\2\265"+
    "\1\u0101\26\265\1\0\1\326\12\0\1\326\1\331\1\0"+
    "\1\265\1\0\1\u0102\1\345\1\u0103\2\345\5\0\1\u0104"+
    "\4\0\31\345\1\0\1\u0102\12\0\1\u0102\1\331\1\0"+
    "\1\345\1\0\1\u0105\1\345\1\u0106\2\345\5\0\1\u0104"+
    "\4\0\31\345\1\0\1\u0105\12\0\1\u0105\1\331\1\0"+
    "\1\345\1\0\1\u0102\1\347\1\u0107\2\347\5\0\1\u0104"+
    "\4\0\31\347\1\0\1\u0102\12\0\1\u0102\1\331\1\0"+
    "\1\347\1\0\1\u0105\1\347\1\u0108\2\347\5\0\1\u0104"+
    "\4\0\31\347\1\0\1\u0105\12\0\1\u0105\1\331\1\0"+
    "\1\347\2\0\4\4\12\0\3\4\1\243\25\4\17\0"+
    "\1\4\2\0\4\4\12\0\13\4\1\155\15\4\17\0"+
    "\1\4\1\0\1\353\1\u0109\1\u010a\14\0\31\u0109\1\0"+
    "\1\353\12\0\1\353\2\0\1\u0109\1\0\1\353\1\u010b"+
    "\1\u010c\2\4\12\0\31\u010b\1\0\1\353\12\0\1\353"+
    "\2\0\1\u010b\2\0\4\4\12\0\11\4\1\105\17\4"+
    "\17\0\1\4\2\0\4\356\12\0\31\356\15\0\1\331"+
    "\1\0\1\356\1\0\1\307\1\356\1\357\2\356\12\0"+
    "\31\356\1\0\1\307\12\0\1\307\1\331\1\0\1\356"+
    "\2\0\4\360\12\0\31\360\15\0\1\331\1\0\1\360"+
    "\1\0\1\307\1\360\1\361\2\360\12\0\31\360\1\0"+
    "\1\307\12\0\1\307\1\331\1\0\1\360\2\0\4\4"+
    "\12\0\14\4\1\106\14\4\17\0\1\4\2\0\4\4"+
    "\12\0\3\4\1\211\25\4\17\0\1\4\2\0\4\4"+
    "\12\0\7\4\1\106\21\4\17\0\1\4\1\0\1\u010d"+
    "\1\365\1\u010e\2\365\5\0\1\u010f\4\0\31\365\1\0"+
    "\1\u010d\12\0\1\u010d\1\331\1\0\1\365\1\0\1\u0110"+
    "\1\365\1\u0111\2\365\5\0\1\u010f\4\0\31\365\1\0"+
    "\1\u0110\12\0\1\u0110\1\331\1\0\1\365\1\0\1\u010d"+
    "\1\367\1\u0112\2\367\5\0\1\u010f\4\0\31\367\1\0"+
    "\1\u010d\12\0\1\u010d\1\331\1\0\1\367\1\0\1\u0110"+
    "\1\367\1\u0113\2\367\5\0\1\u010f\4\0\31\367\1\0"+
    "\1\u0110\12\0\1\u0110\1\331\1\0\1\367\2\0\4\4"+
    "\12\0\11\4\1\72\17\4\17\0\1\4\1\0\1\u0114"+
    "\1\4\1\u0115\2\4\12\0\1\4\1\221\1\303\1\4"+
    "\1\223\1\4\1\224\2\4\1\31\6\4\1\225\1\4"+
    "\1\226\1\4\1\u0116\4\4\1\0\1\u0114\12\0\1\u0114"+
    "\2\0\1\4\44\0\1\u0117\25\0\1\u0118\1\4\1\u0119"+
    "\2\4\12\0\31\4\1\0\1\u0118\12\0\1\u0118\2\0"+
    "\1\54\1\0\1\u011a\1\0\1\u011a\7\0\1\375\36\0"+
    "\1\u011a\12\0\1\u011a\4\0\1\u011a\1\0\1\u011a\2\377"+
    "\5\0\1\376\36\0\1\u011a\12\0\1\u011a\7\0\2\377"+
    "\60\0\1\u011b\4\0\4\4\12\0\11\4\1\u011c\17\4"+
    "\17\0\1\4\1\0\1\326\1\265\1\327\2\265\5\0"+
    "\1\330\4\0\10\265\1\u011d\20\265\1\0\1\326\12\0"+
    "\1\326\1\331\1\0\1\265\1\0\1\u0102\1\0\1\u0102"+
    "\7\0\1\u011e\36\0\1\u0102\12\0\1\u0102\4\0\1\u0102"+
    "\1\345\1\u0103\2\345\5\0\1\u011f\4\0\31\345\1\0"+
    "\1\u0102\12\0\1\u0102\1\331\1\0\1\345\13\0\1\u0104"+
    "\53\0\1\u0120\2\0\1\u0105\1\345\1\u0106\7\0\1\u011e"+
    "\4\0\31\345\1\0\1\u0105\12\0\1\u0105\2\0\1\345"+
    "\1\0\1\u0105\1\345\1\u0106\2\345\5\0\1\u011f\4\0"+
    "\31\345\1\0\1\u0105\12\0\1\u0105\1\331\1\0\1\345"+
    "\1\0\1\u0102\1\347\1\u0107\2\347\5\0\1\u011f\4\0"+
    "\31\347\1\0\1\u0102\12\0\1\u0102\1\331\1\0\1\347"+
    "\1\0\1\u0105\1\347\1\u0108\2\347\5\0\1\u011f\4\0"+
    "\31\347\1\0\1\u0105\12\0\1\u0105\1\331\1\0\1\347"+
    "\1\0\1\u0121\1\u0109\1\u0122\2\u0109\5\0\1\u0123\4\0"+
    "\31\u0109\1\0\1\u0121\12\0\1\u0121\1\331\1\0\1\u0109"+
    "\1\0\1\u0124\1\u0109\1\u0125\2\u0109\5\0\1\u0123\4\0"+
    "\31\u0109\1\0\1\u0124\12\0\1\u0124\1\331\1\0\1\u0109"+
    "\1\0\1\u0121\1\u010b\1\u0126\2\u010b\5\0\1\u0123\4\0"+
    "\31\u010b\1\0\1\u0121\12\0\1\u0121\1\331\1\0\1\u010b"+
    "\1\0\1\u0124\1\u010b\1\u0127\2\u010b\5\0\1\u0123\4\0"+
    "\31\u010b\1\0\1\u0124\12\0\1\u0124\1\331\1\0\1\u010b"+
    "\1\0\1\u010d\1\0\1\u010d\7\0\1\u0128\36\0\1\u010d"+
    "\12\0\1\u010d\4\0\1\u010d\1\365\1\u010e\2\365\5\0"+
    "\1\u0129\4\0\31\365\1\0\1\u010d\12\0\1\u010d\1\331"+
    "\1\0\1\365\13\0\1\u010f\7\0\1\u012a\2\0\1\u012b"+
    "\43\0\1\u0110\1\365\1\u0111\7\0\1\u0128\4\0\31\365"+
    "\1\0\1\u0110\12\0\1\u0110\2\0\1\365\1\0\1\u0110"+
    "\1\365\1\u0111\2\365\5\0\1\u0129\4\0\31\365\1\0"+
    "\1\u0110\12\0\1\u0110\1\331\1\0\1\365\1\0\1\u010d"+
    "\1\367\1\u0112\2\367\5\0\1\u0129\4\0\31\367\1\0"+
    "\1\u010d\12\0\1\u010d\1\331\1\0\1\367\1\0\1\u0110"+
    "\1\367\1\u0113\2\367\5\0\1\u0129\4\0\31\367\1\0"+
    "\1\u0110\12\0\1\u0110\1\331\1\0\1\367\1\0\1\u0114"+
    "\1\u012c\1\u012d\14\0\31\u012c\1\0\1\u0114\12\0\1\u0114"+
    "\2\0\1\u012c\1\0\1\u0114\1\u012e\1\u012f\2\4\12\0"+
    "\31\u012e\1\0\1\u0114\12\0\1\u0114\2\0\1\u012e\2\0"+
    "\4\4\12\0\14\4\1\u0130\14\4\17\0\1\4\27\0"+
    "\1\u0131\42\0\1\u0118\1\u0132\1\u0133\14\0\31\u0132\1\0"+
    "\1\u0118\12\0\1\u0118\2\0\1\u0132\1\0\1\u0118\1\u0134"+
    "\1\u0135\2\4\12\0\31\u0134\1\0\1\u0118\12\0\1\u0118"+
    "\2\0\1\u0134\1\0\1\u011a\1\0\1\u011a\2\u0136\44\0"+
    "\1\u011a\12\0\1\u011a\5\0\4\4\12\0\7\4\1\243"+
    "\21\4\17\0\1\4\1\0\1\326\1\265\1\327\2\265"+
    "\5\0\1\330\4\0\31\265\1\0\1\326\6\0\1\u0137"+
    "\3\0\1\326\1\331\1\0\1\265\1\0\1\u0138\1\0"+
    "\1\u0138\7\0\1\u011e\36\0\1\u0138\12\0\1\u0138\4\0"+
    "\1\u0138\1\0\1\u0138\7\0\1\u011f\36\0\1\u0138\12\0"+
    "\1\u0138\1\0\1\u0120\3\0\2\u0139\14\0\31\u0139\16\0"+
    "\1\u0120\1\u0139\1\0\1\u0121\1\0\1\u0121\7\0\1\u013a"+
    "\36\0\1\u0121\12\0\1\u0121\4\0\1\u0121\1\u0109\1\u0122"+
    "\2\u0109\5\0\1\u013b\4\0\31\u0109\1\0\1\u0121\12\0"+
    "\1\u0121\1\331\1\0\1\u0109\4\0\2\u013c\5\0\1\u0123"+
    "\56\0\1\u0124\1\u0109\1\u0125\7\0\1\u013a\4\0\31\u0109"+
    "\1\0\1\u0124\12\0\1\u0124\2\0\1\u0109\1\0\1\u0124"+
    "\1\u0109\1\u0125\2\u0109\5\0\1\u013b\4\0\31\u0109\1\0"+
    "\1\u0124\12\0\1\u0124\1\331\1\0\1\u0109\1\0\1\u0121"+
    "\1\u010b\1\u0126\2\u010b\5\0\1\u013b\4\0\31\u010b\1\0"+
    "\1\u0121\12\0\1\u0121\1\331\1\0\1\u010b\1\0\1\u0124"+
    "\1\u010b\1\u0127\2\u010b\5\0\1\u013b\4\0\31\u010b\1\0"+
    "\1\u0124\12\0\1\u0124\1\331\1\0\1\u010b\1\0\1\u013d"+
    "\1\0\1\u013d\7\0\1\u0128\36\0\1\u013d\12\0\1\u013d"+
    "\4\0\1\u013d\1\0\1\u013d\7\0\1\u0129\7\0\1\u012a"+
    "\2\0\1\u012b\23\0\1\u013d\12\0\1\u013d\41\0\1\u013e"+
    "\64\0\1\u013f\37\0\1\u0140\1\u012c\1\u0141\2\u012c\5\0"+
    "\1\u0142\4\0\31\u012c\1\0\1\u0140\12\0\1\u0140\1\331"+
    "\1\0\1\u012c\1\0\1\u0143\1\u012c\1\u0144\2\u012c\5\0"+
    "\1\u0142\4\0\31\u012c\1\0\1\u0143\12\0\1\u0143\1\331"+
    "\1\0\1\u012c\1\0\1\u0140\1\u012e\1\u0145\2\u012e\5\0"+
    "\1\u0142\4\0\31\u012e\1\0\1\u0140\12\0\1\u0140\1\331"+
    "\1\0\1\u012e\1\0\1\u0143\1\u012e\1\u0146\2\u012e\5\0"+
    "\1\u0142\4\0\31\u012e\1\0\1\u0143\12\0\1\u0143\1\331"+
    "\1\0\1\u012e\1\0\1\u0147\1\0\1\u0147\46\0\1\u0147"+
    "\2\0\1\u0148\7\0\1\u0147\4\0\1\u0149\1\u0132\1\u014a"+
    "\2\u0132\5\0\1\u014b\4\0\31\u0132\1\0\1\u0149\12\0"+
    "\1\u0149\2\0\1\u0132\1\0\1\u014c\1\u0132\1\u014d\2\u0132"+
    "\5\0\1\u014b\4\0\31\u0132\1\0\1\u014c\12\0\1\u014c"+
    "\2\0\1\u0132\1\0\1\u0149\1\u0134\1\u014e\2\u0134\5\0"+
    "\1\u014b\4\0\31\u0134\1\0\1\u0149\12\0\1\u0149\2\0"+
    "\1\u0134\1\0\1\u014c\1\u0134\1\u014f\2\u0134\5\0\1\u014b"+
    "\4\0\31\u0134\1\0\1\u014c\12\0\1\u014c\2\0\1\u0134"+
    "\4\0\2\u0136\60\0\1\u0150\64\0\1\u0151\7\0\1\u0138"+
    "\1\0\1\u0138\46\0\1\u0138\12\0\1\u0138\1\0\1\u0152"+
    "\3\0\4\u0139\12\0\31\u0139\5\0\1\u0153\11\0\1\u0139"+
    "\1\0\1\u0154\1\0\1\u0154\7\0\1\u013a\36\0\1\u0154"+
    "\12\0\1\u0154\4\0\1\u0154\1\0\1\u0154\2\u013c\5\0"+
    "\1\u013b\36\0\1\u0154\12\0\1\u0154\7\0\2\u013c\1\u0155"+
    "\63\0\1\u013d\1\0\1\u013d\17\0\1\u0156\2\0\1\u0157"+
    "\23\0\1\u013d\12\0\1\u013d\36\0\1\u0158\66\0\1\u0159"+
    "\40\0\1\u0140\1\0\1\u0140\7\0\1\u015a\36\0\1\u0140"+
    "\12\0\1\u0140\4\0\1\u0140\1\u012c\1\u0141\2\u012c\5\0"+
    "\1\u015b\4\0\31\u012c\1\0\1\u0140\12\0\1\u0140\1\331"+
    "\1\0\1\u012c\4\0\2\u015c\5\0\1\u0142\56\0\1\u0143"+
    "\1\u012c\1\u0144\7\0\1\u015a\4\0\31\u012c\1\0\1\u0143"+
    "\12\0\1\u0143\2\0\1\u012c\1\0\1\u0143\1\u012c\1\u0144"+
    "\2\u012c\5\0\1\u015b\4\0\31\u012c\1\0\1\u0143\12\0"+
    "\1\u0143\1\331\1\0\1\u012c\1\0\1\u0140\1\u012e\1\u0145"+
    "\2\u012e\5\0\1\u015b\4\0\31\u012e\1\0\1\u0140\12\0"+
    "\1\u0140\1\331\1\0\1\u012e\1\0\1\u0143\1\u012e\1\u0146"+
    "\2\u012e\5\0\1\u015b\4\0\31\u012e\1\0\1\u0143\12\0"+
    "\1\u0143\1\331\1\0\1\u012e\1\0\1\u0147\1\0\1\u0147"+
    "\10\0\1\u015d\35\0\1\u0147\3\0\1\u015e\6\0\1\u0147"+
    "\4\0\1\u0149\1\0\1\u0149\7\0\1\u015f\36\0\1\u0149"+
    "\12\0\1\u0149\4\0\1\u0149\1\u0132\1\u014a\2\u0132\5\0"+
    "\1\u015f\4\0\31\u0132\1\0\1\u0149\12\0\1\u0149\2\0"+
    "\1\u0132\1\0\1\u0160\1\0\1\u0160\7\0\1\u014b\36\0"+
    "\1\u0160\12\0\1\u0160\4\0\1\u014c\1\u0132\1\u014d\7\0"+
    "\1\u015f\4\0\31\u0132\1\0\1\u014c\12\0\1\u014c\2\0"+
    "\1\u0132\1\0\1\u014c\1\u0132\1\u014d\2\u0132\5\0\1\u015f"+
    "\4\0\31\u0132\1\0\1\u014c\12\0\1\u014c\2\0\1\u0132"+
    "\1\0\1\u0149\1\u0134\1\u014e\2\u0134\5\0\1\u015f\4\0"+
    "\31\u0134\1\0\1\u0149\12\0\1\u0149\2\0\1\u0134\1\0"+
    "\1\u014c\1\u0134\1\u014f\2\u0134\5\0\1\u015f\4\0\31\u0134"+
    "\1\0\1\u014c\12\0\1\u014c\2\0\1\u0134\2\0\2\u0161"+
    "\14\0\31\u0161\16\0\1\u0152\1\u0161\56\0\1\u0153\7\0"+
    "\1\u0162\3\0\1\u0154\1\0\1\u0154\2\u0163\44\0\1\u0154"+
    "\12\0\1\u0154\7\0\2\u0164\121\0\1\u0165\64\0\1\u0166"+
    "\65\0\1\u0167\61\0\1\u0158\51\0\1\u0168\1\0\1\u0168"+
    "\7\0\1\u015a\36\0\1\u0168\12\0\1\u0168\4\0\1\u0168"+
    "\1\0\1\u0168\2\u015c\5\0\1\u015b\36\0\1\u0168\12\0"+
    "\1\u0168\7\0\2\u015c\1\u0169\64\0\2\u016a\10\0\1\u015d"+
    "\3\0\31\u016a\17\0\1\u016a\2\0\2\u016b\14\0\31\u016b"+
    "\5\0\1\u015e\11\0\1\u016b\1\0\1\u016c\1\0\1\u016c"+
    "\7\0\1\u015f\36\0\1\u016c\12\0\1\u016c\4\0\1\u0160"+
    "\1\0\1\u0160\46\0\1\u0160\3\0\1\u016d\6\0\1\u0160"+
    "\5\0\4\u0161\12\0\31\u0161\5\0\1\u016e\11\0\1\u0161"+
    "\4\0\2\u0163\1\u016f\66\0\2\u0170\60\0\1\u0171\35\0"+
    "\1\u0172\66\0\1\u0173\62\0\1\u012a\2\0\1\u012b\37\0"+
    "\1\u0174\3\0\1\u0168\1\0\1\u0168\2\u0175\44\0\1\u0168"+
    "\12\0\1\u0168\7\0\2\u0176\65\0\4\u016a\7\0\1\u0177"+
    "\2\0\31\u016a\17\0\1\u016a\2\0\4\u016b\1\u0178\11\0"+
    "\31\u016b\17\0\1\u016b\1\0\1\u016c\1\0\1\u016c\46\0"+
    "\1\u016c\3\0\1\u0179\6\0\1\u016c\5\0\2\u017a\14\0"+
    "\31\u017a\5\0\1\u016d\11\0\1\u017a\56\0\1\u016e\7\0"+
    "\1\u017b\6\0\2\u017c\67\0\2\u0170\1\u0155\57\0\1\u0171"+
    "\31\0\1\u017d\61\0\1\u0172\54\0\2\u0175\1\u017e\66\0"+
    "\2\u017f\60\0\1\u0180\27\0\1\u0181\45\0\2\u0182\14\0"+
    "\31\u0182\5\0\1\u0179\11\0\1\u0182\2\0\4\u017a\12\0"+
    "\31\u017a\5\0\1\u0183\11\0\1\u017a\4\0\2\u0184\60\0"+
    "\1\u0185\25\0\1\u0156\2\0\1\u0157\37\0\1\u0186\6\0"+
    "\2\u0187\67\0\2\u017f\1\u0169\57\0\1\u0180\10\0\1\u0178"+
    "\47\0\1\u0188\14\0\4\u0182\12\0\31\u0182\5\0\1\u0189"+
    "\11\0\1\u0182\56\0\1\u0183\7\0\1\u018a\6\0\2\u0184"+
    "\1\u016f\57\0\1\u0185\6\0\2\u018b\60\0\1\u018c\60\0"+
    "\1\u0189\7\0\1\u018d\6\0\2\u018b\1\u017e\57\0\1\u018c"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\34\1\10\11\2\1\1\11"+
    "\1\1\1\11\1\1\2\11\45\1\1\0\55\1\1\0"+
    "\7\1\1\0\10\1\1\0\27\1\1\0\4\1\2\0"+
    "\10\1\1\0\1\1\1\0\5\1\1\0\4\1\1\0"+
    "\5\1\1\0\3\1\3\0\1\11\2\0\10\1\3\0"+
    "\4\1\1\0\2\1\2\0\5\1\2\0\4\1\1\0"+
    "\1\1\3\0\1\1\6\0\2\1\2\0\2\1\5\0"+
    "\2\1\1\0\2\1\2\0\1\1\1\0\1\11\1\1"+
    "\11\0\2\1\6\0\3\1\3\0\2\1\17\0\2\1"+
    "\7\0\2\1\2\11\20\0\1\11\16\0\1\11\2\0"+
    "\1\11\2\0\1\11\3\0\1\11\4\0\1\11\4\0"+
    "\2\11\1\0\1\11\1\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 36: break;
          case 2: 
            { /*Ignore*/
            }
          case 37: break;
          case 3: 
            { lexeme=yytext(); return Identificador;
            }
          case 38: break;
          case 4: 
            { lexeme=yytext(); return Int;
            }
          case 39: break;
          case 5: 
            { lexeme=yytext(); return OpAr;
            }
          case 40: break;
          case 6: 
            { lexeme=yytext(); return OpCom;
            }
          case 41: break;
          case 7: 
            { lexeme=yytext(); return OpLog;
            }
          case 42: break;
          case 8: 
            { lexeme=yytext(); return Comillas;
            }
          case 43: break;
          case 9: 
            { lexeme=yytext(); return LlavedeApertura;
            }
          case 44: break;
          case 10: 
            { lexeme=yytext(); return LlavedeCerradura;
            }
          case 45: break;
          case 11: 
            { lexeme=yytext(); return ParentesisdeApertura;
            }
          case 46: break;
          case 12: 
            { lexeme=yytext(); return ParentesisdeCerradura;
            }
          case 47: break;
          case 13: 
            { lexeme=yytext(); return CorchetesdeApertura;
            }
          case 48: break;
          case 14: 
            { lexeme=yytext(); return CorchetesdeCerradura;
            }
          case 49: break;
          case 15: 
            { lexeme=yytext(); return PuntoyComa;
            }
          case 50: break;
          case 16: 
            { lexeme=yytext(); return Separador;
            }
          case 51: break;
          case 17: 
            { lexeme=yytext(); return Keywrod;
            }
          case 52: break;
          case 18: 
            { lexeme=yytext(); return Cin;
            }
          case 53: break;
          case 19: 
            { lexeme=yytext(); return Cout;
            }
          case 54: break;
          case 20: 
            { lexeme=yytext(); return Var;
            }
          case 55: break;
          case 21: 
            { lexeme=yytext(); return VarInt1;
            }
          case 56: break;
          case 22: 
            { lexeme=yytext(); return VarInt;
            }
          case 57: break;
          case 23: 
            { return FuncionMain;
            }
          case 58: break;
          case 24: 
            { lexeme=yytext(); return VarChar;
            }
          case 59: break;
          case 25: 
            { lexeme=yytext(); return VarFloat;
            }
          case 60: break;
          case 26: 
            { lexeme=yytext(); return VarBool;
            }
          case 61: break;
          case 27: 
            { lexeme=yytext(); return Headers1;
            }
          case 62: break;
          case 28: 
            { lexeme=yytext(); return VarChar1;
            }
          case 63: break;
          case 29: 
            { lexeme=yytext(); return VarDouble;
            }
          case 64: break;
          case 30: 
            { lexeme=yytext(); return VarFloat1;
            }
          case 65: break;
          case 31: 
            { lexeme=yytext(); return VarBool1;
            }
          case 66: break;
          case 32: 
            { lexeme=yytext(); return Headers2;
            }
          case 67: break;
          case 33: 
            { lexeme=yytext(); return VarString1;
            }
          case 68: break;
          case 34: 
            { lexeme=yytext(); return VarDouble1;
            }
          case 69: break;
          case 35: 
            { lexeme=yytext(); return VarString;
            }
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
